// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quizzify.DataAccess.Contexts;

#nullable disable

namespace Quizzify.Client.Migrations
{
    [DbContext(typeof(DbQuizzifyContext))]
    [Migration("20240327191229_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quizzify.DataAccess.Entities.PackageEntity", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageId"));

                    b.Property<DateOnly?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("package_name");

                    b.HasKey("PackageId")
                        .HasName("packages_pkey");

                    b.ToTable("Packages", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.PlayerEntity", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nickname");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("UserProfilePicture")
                        .HasColumnType("bytea")
                        .HasColumnName("user_profile_picture");

                    b.HasKey("PlayerId")
                        .HasName("players_pkey");

                    b.HasIndex(new[] { "UserId" }, "players_user_id_key")
                        .IsUnique();

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<byte[]>("AnswerImageUrl")
                        .HasColumnType("bytea")
                        .HasColumnName("answer_image_url");

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<string>("QuestionComment")
                        .HasColumnType("text")
                        .HasColumnName("question_comment");

                    b.Property<int>("QuestionCost")
                        .HasColumnType("integer")
                        .HasColumnName("question_cost");

                    b.Property<byte[]>("QuestionImageUrl")
                        .HasColumnType("bytea")
                        .HasColumnName("question_image_url");

                    b.Property<string>("QuestionText")
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<string>("QuestionTheme")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("question_theme");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.HasKey("QuestionId")
                        .HasName("questions_pkey");

                    b.HasIndex("RoundId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.RoundEntity", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoundId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.Property<string>("RoundType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("round_type");

                    b.HasKey("RoundId")
                        .HasName("rounds_pkey");

                    b.HasIndex("PackageId");

                    b.ToTable("Rounds", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.SecretQuestionEntity", b =>
                {
                    b.Property<int>("SecretQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("secret_q_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SecretQId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.HasKey("SecretQId")
                        .HasName("secretquestions_pkey");

                    b.ToTable("SecretQuestions", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<byte[]>("GoogleAuthorization")
                        .HasColumnType("bytea")
                        .HasColumnName("google_authorization");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("SecretAnswerHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("secret_answer_hash");

                    b.Property<int?>("SelectedSecretQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_secret_question_id");

                    b.Property<string>("TwofaAuthMethod")
                        .HasColumnType("text")
                        .HasColumnName("twofa_auth_method");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("SelectedSecretQuestionId");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.PlayerEntity", b =>
                {
                    b.HasOne("Quizzify.DataAccess.Entities.UserEntity", "User")
                        .WithOne("Player")
                        .HasForeignKey("Quizzify.DataAccess.Entities.PlayerEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_id_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.QuestionEntity", b =>
                {
                    b.HasOne("Quizzify.DataAccess.Entities.RoundEntity", "Round")
                        .WithMany("Questions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("questions_round_id_fk");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.RoundEntity", b =>
                {
                    b.HasOne("Quizzify.DataAccess.Entities.PackageEntity", "Package")
                        .WithMany("Rounds")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rounds_package_id_fk");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.UserEntity", b =>
                {
                    b.HasOne("Quizzify.DataAccess.Entities.SecretQuestionEntity", "SelectedSecretQuestion")
                        .WithMany("Users")
                        .HasForeignKey("SelectedSecretQuestionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("secret_question_fk");

                    b.Navigation("SelectedSecretQuestion");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.PackageEntity", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.RoundEntity", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.SecretQuestionEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quizzify.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
